// A basic everyday NeoPixel strip test program.

// NEOPIXEL BEST PRACTICES for most reliable operation:
// - Add 1000 uF CAPACITOR between NeoPixel strip's + and - connections.
// - MINIMIZE WIRING LENGTH between microcontroller board and first pixel.
// - NeoPixel strip's DATA-IN should pass through a 300-500 OHM RESISTOR.
// - AVOID connecting NeoPixels on a LIVE CIRCUIT. If you must, ALWAYS
//   connect GROUND (-) first, then +, then data.
// - When using a 3.3V microcontroller with a 5V-powered NeoPixel strip,
//   a LOGIC-LEVEL CONVERTER on the data line is STRONGLY RECOMMENDED.
// (Skipping these may work OK on your workbench but can fail in the field)

#include <Stepper.h>

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
 #include <avr/power.h> // Required for 16 MHz Adafruit Trinket
#endif

// Which pin on the Arduino is connected to the NeoPixels?
// On a Trinket or Gemma we suggest changing this to 1:
#define LED_PIN    5

// How many NeoPixels are attached to the Arduino?
#define LED_COUNT 231

#define STRIP1_PIN   8
#define STRIP2_PIN   9
#define STRIP3_PIN   10

// Declare our NeoPixel strip object:
Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);
// Argument 1 = Number of pixels in NeoPixel strip
// Argument 2 = Arduino pin number (most are valid)
// Argument 3 = Pixel type flags, add together as needed:
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)
//   NEO_RGBW    Pixels are wired for RGBW bitstream (NeoPixel RGBW products)

int strip1_state = 0;
int strip2_state = 0;
int strip3_state = 0;

const int stepsPerRevolution = 340;  // change this to fit the angle to move it (maybe times 2)

Stepper myStepper(stepsPerRevolution, 13, 2, 3, 4); //BECAUSE PIN 1 IS NOT MEANT FOR STEPPER


// setup() function -- runs once at startup --------------------------------

void setup() {
  // These lines are specifically to support the Adafruit Trinket 5V 16 MHz.
  // Any other board, you can remove this part (but no harm leaving it):
#if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)
  clock_prescale_set(clock_div_1);
#endif
  // END of Trinket-specific code.

  strip.begin();           // INITIALIZE NeoPixel strip object (REQUIRED)
  strip.clear();            // Turn OFF all pixels ASAP
  strip.setBrightness(255); // Set BRIGHTNESS to about 1/5 (max = 255)
  pinMode(STRIP1_PIN, INPUT_PULLUP);
  pinMode(STRIP2_PIN, INPUT_PULLUP);
  pinMode(STRIP3_PIN, INPUT_PULLUP);

  myStepper.setSpeed(60); 

  Serial.begin(9600);
}


// loop() function -- runs repeatedly as long as board is on ---------------


int pin8occurance = 0;
int pin9occurance = 0;
int pin10occurance = 0;

void loop() {
  // Fill along the length of the strip in various colors...
  int pin8 = digitalRead(STRIP1_PIN);
  int pin9 = digitalRead(STRIP2_PIN);
  int pin10 = digitalRead(STRIP3_PIN);
  

  if (pin8 == LOW && !pin10 == LOW && pin8occurance == 0) { //turn adventure of sherlock holmes green
    delay(100);
    colorWipe(strip.Color(0, 255, 0), 20, 0, 31);
    strip.show();
    myStepper.step(stepsPerRevolution);
    myStepper.step(stepsPerRevolution);
    pin8occurance = 1;
  } else if (pin8 == LOW && !pin10 == LOW && pin8occurance == 1) { //turn adventure of sherlock holmes green
    colorWipe(strip.Color(0, 255, 0), 20, 0, 31);
    strip.show();
  }

  if (pin9 == LOW && !pin10 == LOW && pin9occurance == 0) { // snow white
    delay(100);
    colorWipe(strip.Color(0, 255, 0), 10, 31, 185);
    strip.show();
    pin9occurance = 1;
    myStepper.step(stepsPerRevolution);
    myStepper.step(stepsPerRevolution);
  } else if (pin9 == LOW && !pin10 == LOW && pin9occurance == 1) { // snow white
    colorWipe(strip.Color(0, 255, 0), 0, 31, 185);
    strip.show();
  }
  
  if (pin10 == LOW && pin10occurance == 0) { //little mermaid
    delay(100);
    colorWipe(strip.Color(0, 255, 0), 0, 0, 185);
    colorWipe(strip.Color(255, 0, 0), 25, 185, 231);
    strip.show();
    myStepper.step(stepsPerRevolution);
    myStepper.step(stepsPerRevolution);
    for (int i = 0; i < 3; i++) {
      colorWipe(strip.Color(0, 0, 0), 0, 0, 231);
      strip.show();
      delay(500);
      colorWipe(strip.Color(255, 0, 0), 0, 0, 231);
      strip.show();
      delay(500);
    }
    pin10occurance = 1;
  } else if (pin10 == LOW && pin10occurance == 1) {
    colorWipe(strip.Color(255, 0, 0), 0, 0, 231);
    strip.show();
  }
}


// Some functions of our own for creating animated effects -----------------

// Fill strip pixels one after another with a color. Strip is NOT cleared
// first; anything there will be covered pixel by pixel. Pass in color
// (as a single 'packed' 32-bit value, which you can get by calling
// strip.Color(red, green, blue) as shown in the loop() function above),
// and a delay time (in milliseconds) between pixels.
void colorWipe(uint32_t color, int wait, int start, int end) {
  for(int i=start; i<end; i++) { // For each pixel in strip...
    strip.setPixelColor(i, color);         //  Set pixel's color (in RAM)
    if (wait > 0 ) strip.show();                    //  Update strip to match
    if (wait > 0 ) delay(wait);                     //  Pause for a moment
  }
}
